{"version":3,"sources":["Components/repositories.js","Components/infiniteScroll.js","App.js","reportWebVitals.js","index.js"],"names":["RenderRepo","repo","Media","className","src","owner","avatar_url","alt","style","maxHeight","maxWidth","body","heading","name","description","Badge","color","stargazers_count","open_issues_count","Math","trunc","Date","getTime","updated_at","login","Repositories","props","repos","map","list","InfinitScroll","state","loading","page","prevY","errorMessage","this","getRepos","observer","IntersectionObserver","handleObserver","bind","root","rootMargin","threshold","observe","loadingRef","entities","y","boundingClientRect","curPage","setState","d","getFullYear","getMonth","getDate","axios","get","toISOString","then","res","data","items","catch","error","message","length","ref","Spinner","display","width","height","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9e3f984e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Media, Badge} from 'reactstrap';\r\n\r\nfunction RenderRepo({repo}) {\r\n    return( \r\n        <Media className=\"mb-5\">\r\n        <Media className=\"mr-5\" >\r\n          <Media src={repo.owner.avatar_url} alt=\"owner's image\" style={{maxHeight: 128, maxWidth: 128}} />\r\n        </Media>\r\n        <Media body >\r\n          <Media heading>\r\n            {repo.name}\r\n          </Media>\r\n          <p>{repo.description}</p>\r\n          <p><Badge  color=\"secondary\">Stars: {repo.stargazers_count} </Badge>  <Badge color=\"secondary\">Issues: {repo.open_issues_count}  </Badge> submitted{\" \"}\r\n              {Math.trunc(\r\n                (new Date().getTime() - new Date(repo.updated_at).getTime()) /\r\n                  (1000 * 3600 * 24)\r\n              )}{\" \"}\r\n              days ago by {repo.owner.login}  </p>        \r\n        </Media>\r\n      </Media>\r\n      )\r\n}\r\n    \r\n    \r\n\r\n\r\nfunction Repositories(props) {\r\n    const repos = props.repos.map((repo) => {\r\n        return (\r\n            <RenderRepo repo={repo}/>\r\n        );\r\n    });\r\n    \r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <div className=\"row row-content\">\r\n                <div className=\"col-12\">\r\n                    <hr/>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                    <Media list>\r\n                        {repos}\r\n                    </Media>\r\n                </div>\r\n            </div>\r\n               \r\n       </div>\r\n    );\r\n}\r\n\r\nexport default Repositories;","import React, { Component } from 'react';\r\nimport axios from \"axios\";\r\nimport {Spinner} from \"reactstrap\";\r\nimport Repositories from './repositories';\r\n\r\nclass  InfinitScroll extends Component{\r\n\r\n    constructor(){\r\n      super();\r\n      this.state={\r\n        repos:[],\r\n        loading: false,\r\n        page: 1,\r\n        prevY: 0 ,\r\n        errorMessage:''\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getRepos(this.state.page);\r\n    var options = {\r\n      root: null,\r\n      rootMargin: \"0px\",\r\n      threshold: 1.0,\r\n    };\r\n    \r\n    this.observer = new IntersectionObserver(\r\n      this.handleObserver.bind(this),\r\n      options\r\n    );\r\n    this.observer.observe(this.loadingRef);\r\n  }\r\n \r\n  handleObserver(entities) {\r\n    const y = entities[0].boundingClientRect.y;\r\n    if (this.state.prevY > y) {\r\n      const curPage = this.state.page + 1;\r\n      this.getRepos(curPage);\r\n      this.setState({ page: curPage });\r\n    }\r\n    this.setState({ prevY: y });\r\n  }\r\n  getRepos(page) {\r\n    this.setState({ loading: true });\r\n    let d = new Date(\r\n      new Date().getFullYear(),\r\n      new Date().getMonth(),\r\n      new Date().getDate()\r\n    );\r\n    axios\r\n      .get(\r\n        `https://api.github.com/search/repositories?q=created:>${d.toISOString()}&sort=stars&order=desc&page=${page}`\r\n      )\r\n      .then(res => {\r\n        this.setState({ repos: [...this.state.repos, ...res.data.items], errorMessage:''});\r\n        \r\n      }).catch(error=>{\r\n        this.setState({ errorMessage: error.message, loading:false });\r\n      });\r\n  }\r\n  \r\n    render() {\r\n      return (<>\r\n       <Repositories repos={this.state.repos}/>\r\n       <p>{this.state.repos.length} repository</p>\r\n     \r\n       <div\r\n          ref={loadingRef => (this.loadingRef = loadingRef)}\r\n        >\r\n        <Spinner style={{ display: this.state.loading  ? \"block\" : \"none\", width: '3rem', height: '3rem'  }}  />\r\n         {this.state.errorMessage && <span> {this.state.errorMessage} </span>} \r\n        </div>\r\n      </>\r\n      );\r\n    }\r\n   }\r\n  \r\n  \r\n  export default InfinitScroll;\r\n  ","import React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport InfinitScroll from './Components/infiniteScroll';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n \r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n        <InfinitScroll/>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}